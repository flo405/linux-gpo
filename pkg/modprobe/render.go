// pkg/modprobe/render.go
package modprobe

import (
	"bytes"
	"fmt"
	"sort"
)

// Render returns the modprobe configuration bytes and the list of
// normalized module names (underscore form) that should be considered
// for runtime unloading when InstantApply is set.
func Render(p *Policy) (conf []byte, modules []string, err error) {
	if err := p.Validate(); err != nil {
		return nil, nil, err
	}

	seen := map[string]struct{}{}
	out := &bytes.Buffer{}
	mods := make([]string, 0, len(p.Spec.Blacklist))

	// Write a header banner
	fmt.Fprintf(out, "# generated by lgpo (modprobe) for policy %s\n", p.Metadata.Name)

	for _, raw := range p.Spec.Blacklist {
		canon, alias := normalize(raw)
		if _, ok := seen[canon]; ok {
			continue
		}
		seen[canon] = struct{}{}
		mods = append(mods, canon)

		// blacklist both underscore & hyphen forms for belt-and-suspenders
		fmt.Fprintf(out, "blacklist %s\n", canon)
		if alias != canon {
			fmt.Fprintf(out, "blacklist %s\n", alias)
		}

		if p.Spec.InstallFalse {
			fmt.Fprintf(out, "install %s /bin/false\n", canon)
			if alias != canon {
				fmt.Fprintf(out, "install %s /bin/false\n", alias)
			}
		}
	}

	// Make output deterministic
	sort.Strings(mods)

	return out.Bytes(), mods, nil
}
